using System.Drawing;
using System.Numerics;

namespace ParkeringsAppenTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void FindAvailableSpotTest()
        {
            // Skapa en instans av ParkingLot
            var parkingLot = new ParkeringsAppen.ParkingLot();

            // Fyll alla platser i parkeringshuset
            for (int i = 0; i < 25; i++)
            {
                var car = new ParkeringsAppen.Car("red", $"ABC{i:D3}", true); // Skapa unika bilar
                parkingLot.ParkVehicle(car, 60); // Parkera varje bil i 60 sekunder
            }

            // Försök hitta en ledig plats för en ny bil när alla platser är upptagna
            var newCar = new ParkeringsAppen.Car("blue", "ABC123", false);
            int result = parkingLot.FindAvailableSpot(newCar);

            // Förväntat resultat: -1 (ingen ledig plats ska finnas)
            Assert.AreEqual(-1, result);
        }






        [TestMethod]

        public void ShowParkedVehiclesTest()

        {

            // Skapa en instans av ParkingLot

            var parkingLot = new ParkeringsAppen.ParkingLot();



            // Parkera ett fordon för att testa att det visas korrekt

            var car = new ParkeringsAppen.Car("blue", "XYZ123", false);

            parkingLot.ParkVehicle(car, 60); // Parkera bilen i 60 sekunder



            // Temporärt fånga upp Console-utmatning

            using (var sw = new StringWriter())

            {

                Console.SetOut(sw);



                // Anropa ShowParkedVehicles som skriver till konsolen

                parkingLot.ShowParkedVehicles();



                // Fånga utmatningen från konsolen

                var result = sw.ToString();



                // Kontrollera att utmatningen innehåller information om den parkerade bilen

                StringAssert.Contains(result, "Car - XYZ123 - blue - Plats 0");

            }

        }












        [TestMethod]

        public void CheckForExpiredVehiclesTest()

        {

            // Skapa en instans av ParkingLot

            var parkingLot = new ParkeringsAppen.ParkingLot();



            // Parkera ett fordon med en utgången parkeringstid

            var car = new ParkeringsAppen.Car("blue", "ABC123", false);

            parkingLot.ParkVehicle(car, -10); // Använd negativ tid så att parkeringstiden redan är ute



            // Temporärt fånga upp Console-utmatningen

            using (var sw = new StringWriter())

            {

                Console.SetOut(sw);



                // Anropa metoden som kontrollerar utgången tid och lägger böter

                parkingLot.CheckForExpiredVehicles();



                // Fånga konsolutmatningen

                var result = sw.ToString();



                // Verifiera att bötesmeddelandet skrivs ut för fordonet med registreringsnummer XYZ123

                StringAssert.Contains(result, "ABC123 har överstigit parkeringstiden. Bot på 500 kr.");

            }

        }
    }
}